// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	dto "github.com/spanwalla/pvz/internal/dto"
	entity "github.com/spanwalla/pvz/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPoint is a mock of Point interface.
type MockPoint struct {
	ctrl     *gomock.Controller
	recorder *MockPointMockRecorder
	isgomock struct{}
}

// MockPointMockRecorder is the mock recorder for MockPoint.
type MockPointMockRecorder struct {
	mock *MockPoint
}

// NewMockPoint creates a new mock instance.
func NewMockPoint(ctrl *gomock.Controller) *MockPoint {
	mock := &MockPoint{ctrl: ctrl}
	mock.recorder = &MockPointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoint) EXPECT() *MockPointMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPoint) Create(ctx context.Context, city string) (entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, city)
	ret0, _ := ret[0].(entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPointMockRecorder) Create(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPoint)(nil).Create), ctx, city)
}

// GetAll mocks base method.
func (m *MockPoint) GetAll(ctx context.Context) ([]entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPointMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPoint)(nil).GetAll), ctx)
}

// GetExtended mocks base method.
func (m *MockPoint) GetExtended(ctx context.Context, start, end *time.Time, offset, limit int) ([]dto.PointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtended", ctx, start, end, offset, limit)
	ret0, _ := ret[0].([]dto.PointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtended indicates an expected call of GetExtended.
func (mr *MockPointMockRecorder) GetExtended(ctx, start, end, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtended", reflect.TypeOf((*MockPoint)(nil).GetExtended), ctx, start, end, offset, limit)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
	isgomock struct{}
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProduct) Create(ctx context.Context, receptionID uuid.UUID, productType entity.ProductType) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, receptionID, productType)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductMockRecorder) Create(ctx, receptionID, productType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), ctx, receptionID, productType)
}

// DeleteByID mocks base method.
func (m *MockProduct) DeleteByID(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockProductMockRecorder) DeleteByID(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockProduct)(nil).DeleteByID), ctx, productID)
}

// GetLatestID mocks base method.
func (m *MockProduct) GetLatestID(ctx context.Context, receptionID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestID", ctx, receptionID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestID indicates an expected call of GetLatestID.
func (mr *MockProductMockRecorder) GetLatestID(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestID", reflect.TypeOf((*MockProduct)(nil).GetLatestID), ctx, receptionID)
}

// MockReception is a mock of Reception interface.
type MockReception struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionMockRecorder
	isgomock struct{}
}

// MockReceptionMockRecorder is the mock recorder for MockReception.
type MockReceptionMockRecorder struct {
	mock *MockReception
}

// NewMockReception creates a new mock instance.
func NewMockReception(ctrl *gomock.Controller) *MockReception {
	mock := &MockReception{ctrl: ctrl}
	mock.recorder = &MockReceptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReception) EXPECT() *MockReceptionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReception) Close(ctx context.Context, receptionID uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx, receptionID)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockReceptionMockRecorder) Close(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReception)(nil).Close), ctx, receptionID)
}

// Create mocks base method.
func (m *MockReception) Create(ctx context.Context, pointID uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pointID)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReceptionMockRecorder) Create(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReception)(nil).Create), ctx, pointID)
}

// GetActiveID mocks base method.
func (m *MockReception) GetActiveID(ctx context.Context, pointID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveID", ctx, pointID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveID indicates an expected call of GetActiveID.
func (mr *MockReceptionMockRecorder) GetActiveID(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveID", reflect.TypeOf((*MockReception)(nil).GetActiveID), ctx, pointID)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
	isgomock struct{}
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(ctx context.Context, email, password string, role entity.RoleType) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, email, password, role)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx, email, password, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx, email, password, role)
}

// GetByEmail mocks base method.
func (m *MockUser) GetByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUser)(nil).GetByEmail), ctx, email)
}
