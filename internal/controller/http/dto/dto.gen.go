// Package dto provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package dto

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PVZCity.
const (
	Казань         PVZCity = "Казань"
	Москва         PVZCity = "Москва"
	СанктПетербург PVZCity = "Санкт-Петербург"
)

// Defines values for ProductType.
const (
	ProductTypeОбувь       ProductType = "обувь"
	ProductTypeОдежда      ProductType = "одежда"
	ProductTypeЭлектроника ProductType = "электроника"
)

// Defines values for ReceptionStatus.
const (
	Close      ReceptionStatus = "close"
	InProgress ReceptionStatus = "in_progress"
)

// Defines values for UserRole.
const (
	UserRoleEmployee  UserRole = "employee"
	UserRoleModerator UserRole = "moderator"
)

// Defines values for PostDummyLoginJSONBodyRole.
const (
	PostDummyLoginJSONBodyRoleEmployee  PostDummyLoginJSONBodyRole = "employee"
	PostDummyLoginJSONBodyRoleModerator PostDummyLoginJSONBodyRole = "moderator"
)

// Defines values for PostProductsJSONBodyType.
const (
	PostProductsJSONBodyTypeОбувь       PostProductsJSONBodyType = "обувь"
	PostProductsJSONBodyTypeОдежда      PostProductsJSONBodyType = "одежда"
	PostProductsJSONBodyTypeЭлектроника PostProductsJSONBodyType = "электроника"
)

// Defines values for PostRegisterJSONBodyRole.
const (
	Employee  PostRegisterJSONBodyRole = "employee"
	Moderator PostRegisterJSONBodyRole = "moderator"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// PVZ defines model for PVZ.
type PVZ struct {
	City             PVZCity             `json:"city"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	RegistrationDate *time.Time          `json:"registrationDate,omitempty"`
}

// PVZCity defines model for PVZ.City.
type PVZCity string

// Product defines model for Product.
type Product struct {
	DateTime    *time.Time          `json:"dateTime,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	ReceptionId openapi_types.UUID  `json:"receptionId"`
	Type        ProductType         `json:"type"`
}

// ProductType defines model for Product.Type.
type ProductType string

// Reception defines model for Reception.
type Reception struct {
	DateTime time.Time           `json:"dateTime"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	PvzId    openapi_types.UUID  `json:"pvzId"`
	Status   ReceptionStatus     `json:"status"`
}

// ReceptionStatus defines model for Reception.Status.
type ReceptionStatus string

// Token defines model for Token.
type Token = string

// User defines model for User.
type User struct {
	Email openapi_types.Email `json:"email"`
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Role  UserRole            `json:"role"`
}

// UserRole defines model for User.Role.
type UserRole string

// PostDummyLoginJSONBody defines parameters for PostDummyLogin.
type PostDummyLoginJSONBody struct {
	Role PostDummyLoginJSONBodyRole `json:"role"`
}

// PostDummyLoginJSONBodyRole defines parameters for PostDummyLogin.
type PostDummyLoginJSONBodyRole string

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// PostProductsJSONBody defines parameters for PostProducts.
type PostProductsJSONBody struct {
	PvzId openapi_types.UUID       `json:"pvzId"`
	Type  PostProductsJSONBodyType `json:"type"`
}

// PostProductsJSONBodyType defines parameters for PostProducts.
type PostProductsJSONBodyType string

// GetPvzParams defines parameters for GetPvz.
type GetPvzParams struct {
	// StartDate Начальная дата диапазона
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Конечная дата диапазона
	EndDate *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Page Номер страницы
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Количество элементов на странице
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostReceptionsJSONBody defines parameters for PostReceptions.
type PostReceptionsJSONBody struct {
	PvzId openapi_types.UUID `json:"pvzId"`
}

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody struct {
	Email    openapi_types.Email      `json:"email"`
	Password string                   `json:"password"`
	Role     PostRegisterJSONBodyRole `json:"role"`
}

// PostRegisterJSONBodyRole defines parameters for PostRegister.
type PostRegisterJSONBodyRole string

// PostDummyLoginJSONRequestBody defines body for PostDummyLogin for application/json ContentType.
type PostDummyLoginJSONRequestBody PostDummyLoginJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody PostProductsJSONBody

// PostPvzJSONRequestBody defines body for PostPvz for application/json ContentType.
type PostPvzJSONRequestBody = PVZ

// PostReceptionsJSONRequestBody defines body for PostReceptions for application/json ContentType.
type PostReceptionsJSONRequestBody PostReceptionsJSONBody

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZ724TSRJ/lVHffeCkASfHffK3u+M4cUK6iONYCRShwe44A54/9LSza5Cl2N6FRWSX",
	"1QoJCS1iWV5gcGJinHjyCtVvtKrqGXvGHsdOYmUNn2zPVHdXVf+q6lflx6zkOb7nclcGrPiYBaVN7lj0",
	"9V9CeAK/+MLzuZA2p8cODwKrwvGrrPucFVkghe1WWKNhMsEf1mzBy6x4Zyi4biaC3r37vCRZw2Rrt25P",
	"7lyyZR0/uVtzcAP4BSLVhD50IGQmg3cQwgD6qnUR3kJXtaCrtuGDaqtt2MX3ryGEfZRRO6lDE+1MZpdx",
	"9w1POJZkRVar2WWWIyZ4xQ6ksKTtuVcsyTOLypbkF6Xt8MmVY+aTNbm2C69cK8lJ+3Hvm7j1nAeewKIS",
	"99Gca/PJ6weji1A/wAF00fNqGyIYQA/6+koi2IMufIS95OcH1YZOrv/H3ENvs6rlOetG8v4c3eVvPZrT",
	"UYG0ZC1Iu8p27/rCqwgeBMxkpaoX8Nm+GFqSnD3cOc8lN70H3M0JP5P9P+A5Acsdy65mzNFPzoAnr5rB",
	"B3f8qlfnqL/jlbmwpCdmW51oQbtNGoru5aWasGX9f5iUtDH3uCW4+HtNbo5+XU30/c9XN9F1JM2K8duR",
	"AZtS+qyBG9vuhkcQ4kFJ2DG+MMFgRulATzUN2IMD9cJQbThS2xBCh0JgAD31woC38DO8MqBn0MsedOEQ",
	"+hDBJ0O1IMJ8RYHSwbNtWSVlrNID7paNgIstu4Su2uIi0AevXlq5tIKO9XzuWr7NiuwyPTKZb8lNMrxQ",
	"rjlO/bpXsXUoeAFlELxoKwlttuYF8spITvubB/IfXpkya8lzJXdpoeX7VbtESwv3Ax1fOvlPImgx9z3t",
	"njNiUtQ4PQh8zw308X9dWTmR8n8WfIMV2Z8Ko9JWiOtaQQcPHTp2+e9VE46gq76HAYR4ySF08Dbpgvch",
	"VE/w7vGW/rZAfXSRzdPnDXShQ4AcqOfwyaDShnCLVFNHR81xLFFH2bcQwYFqq6caotA1qDo2YzRGsAuR",
	"hmafJELaoFCdjabFAukEqci3guBrT5Rn84xki+GKLwNjq+eOsa6hIaRa8U8s6zDQP8Yh91Oe5gYcERJ3",
	"YD9Ogy3oYh7VePM18wmOh9xaIrUo1M1fz8+R+GilTgfVxUEj4aJ54PgtqWSIgwg+jIrgciRBA3pwgDV4",
	"gJDFWOqrFvSgAwMqxZna3NM6Xz4HnV+icqqFzGGkb1c9055L0RpWvJMlNHfWG+uZIHuZ9XuS2ROGERrQ",
	"oUwPfdVWz1Rb/ZixWrWNCySOEdmHaEhqmhAhpFUb9mJQR9CJac1f4ljdeoQuqPCcKP03l2tbjyjlCsvh",
	"kouAbJm4vFA9hZBOj/PdHqWEEL/00DPUsUVUkZCVsSJ7WOOizkzmWo4OIktI6sLM1MXM145NKPSajuqq",
	"p6dWh7vlRSnzBiI4RGgbhJZtSrU99UQ9n3K2j810+uAy37BqVcmKqyZzbNd2MGmtDs+2XckrXEz1xAH0",
	"KNsjS+ggP9DJ7hCRpkGGoRWOqQfdKepVbceWU/RbMZljfaMVvLwyQ9v1M5ZmW3InyK0CM7PhrduZdjk4",
	"brtULRuKzJVqhyZbQlj1zIGz9hh1w41GTmeY3XcOicnk9Q6OsP1BphjngxOmrBwq2oz37GOk6dZJNQ31",
	"LeZvtaPBhfwBupS1dZ4i6jCWw3XHBSHsQo9COF5EfHE6n6BUdVoqMRMv51ywkyPH7i1xK0Swr2nbsnQq",
	"n2HZfTfyIiE49m5uLYVDzQUJxJoQR9AZFdHCY2J6jQLNgu5WrUDezcT7scBdw7X/xJXXrUCOwn+i9FJG",
	"9i25maoX8SgpC87cypXPh8+ciedNZTlwToV9qK+zr7bVc6zWS8Y+jzKqqjZ8RMTkaPyZBcGrlAUUBEc0",
	"jUeKgKSRcnWkWkOZSco9Ngwjsoo8gjylvkvXl0yklHmVyzhU/NSwfGagXKGFGClJsf1D42RqP0W8O1ym",
	"Xsqcs4sa67nGL3g4Mx2aN5pnfGbwf5+2IQ/+u7oGZBu0QXrWNmzSerCfatNimpNx64Xr167+1zRO26xl",
	"Gev0QLkxkjvv4crYFGQ5xh8nKUJpbrV0RYi6OLVDcZmtPTSUSxvyZTCyQTzYnlVzLpw+pCp2IOP/044J",
	"qFhquSbki/6LbniUeZZ/cRYXt/RHZ34blDd+3lnKxig7T/+VSkovGbbMnqc3Gr8HAAD//82HIsO8IQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
