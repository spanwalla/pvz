// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	dto "github.com/spanwalla/pvz/internal/dto"
	entity "github.com/spanwalla/pvz/internal/entity"
	service "github.com/spanwalla/pvz/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// DummyLogin mocks base method.
func (m *MockAuth) DummyLogin(ctx context.Context, role entity.RoleType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", ctx, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockAuthMockRecorder) DummyLogin(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockAuth)(nil).DummyLogin), ctx, role)
}

// Login mocks base method.
func (m *MockAuth) Login(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuth)(nil).Login), ctx, email, password)
}

// ParseToken mocks base method.
func (m *MockAuth) ParseToken(token string) (*entity.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(*entity.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuth)(nil).ParseToken), token)
}

// Register mocks base method.
func (m *MockAuth) Register(ctx context.Context, email, password string, role entity.RoleType) (service.RegisterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, email, password, role)
	ret0, _ := ret[0].(service.RegisterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthMockRecorder) Register(ctx, email, password, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuth)(nil).Register), ctx, email, password, role)
}

// MockPoint is a mock of Point interface.
type MockPoint struct {
	ctrl     *gomock.Controller
	recorder *MockPointMockRecorder
	isgomock struct{}
}

// MockPointMockRecorder is the mock recorder for MockPoint.
type MockPointMockRecorder struct {
	mock *MockPoint
}

// NewMockPoint creates a new mock instance.
func NewMockPoint(ctrl *gomock.Controller) *MockPoint {
	mock := &MockPoint{ctrl: ctrl}
	mock.recorder = &MockPointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoint) EXPECT() *MockPointMockRecorder {
	return m.recorder
}

// CloseLastReception mocks base method.
func (m *MockPoint) CloseLastReception(ctx context.Context, pointID uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", ctx, pointID)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockPointMockRecorder) CloseLastReception(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockPoint)(nil).CloseLastReception), ctx, pointID)
}

// Create mocks base method.
func (m *MockPoint) Create(ctx context.Context, city string) (entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, city)
	ret0, _ := ret[0].(entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPointMockRecorder) Create(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPoint)(nil).Create), ctx, city)
}

// DeleteLastProduct mocks base method.
func (m *MockPoint) DeleteLastProduct(ctx context.Context, pointID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pointID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockPointMockRecorder) DeleteLastProduct(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockPoint)(nil).DeleteLastProduct), ctx, pointID)
}

// GetAll mocks base method.
func (m *MockPoint) GetAll(ctx context.Context) ([]entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPointMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPoint)(nil).GetAll), ctx)
}

// GetExtended mocks base method.
func (m *MockPoint) GetExtended(ctx context.Context, start, end *time.Time, pagePtr, limitPtr *int) ([]dto.PointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtended", ctx, start, end, pagePtr, limitPtr)
	ret0, _ := ret[0].([]dto.PointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtended indicates an expected call of GetExtended.
func (mr *MockPointMockRecorder) GetExtended(ctx, start, end, pagePtr, limitPtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtended", reflect.TypeOf((*MockPoint)(nil).GetExtended), ctx, start, end, pagePtr, limitPtr)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
	isgomock struct{}
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProduct) Create(ctx context.Context, pointID uuid.UUID, productType entity.ProductType) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pointID, productType)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductMockRecorder) Create(ctx, pointID, productType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), ctx, pointID, productType)
}

// MockReception is a mock of Reception interface.
type MockReception struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionMockRecorder
	isgomock struct{}
}

// MockReceptionMockRecorder is the mock recorder for MockReception.
type MockReceptionMockRecorder struct {
	mock *MockReception
}

// NewMockReception creates a new mock instance.
func NewMockReception(ctrl *gomock.Controller) *MockReception {
	mock := &MockReception{ctrl: ctrl}
	mock.recorder = &MockReceptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReception) EXPECT() *MockReceptionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReception) Create(ctx context.Context, pointID uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pointID)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReceptionMockRecorder) Create(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReception)(nil).Create), ctx, pointID)
}
